{"version":3,"sources":["../external \"electron\"","WebRTC/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","require","WebRTC","monitor","useRef","monitorVideo","recorder","recorderVideo","useState","monitorVisible","setMonitorVisible","recorderVisible","setRecorderVisible","useEffect","current","initMonitor","initRecorder","a","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","srcObject","onloadedmetadata","play","monitorDrawToCanvas","getContext","drawImage","requestAnimationFrame","desktopCapturer","getSources","types","then","sources","mandatory","chromeMediaSource","chromeMediaSourceId","id","minWidth","maxWidth","minHeight","maxHeight","RecorderDrawToCanvas","console","error","className","styles","mediaWrapper","width","height","ref","style","background","autoPlay","btnWrapper","type","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"qHAAAA,EAAOC,QAAUC,QAAQ,a,wOCgJVC,EAtIU,WACrB,IAAMC,EAAUC,iBAA0B,MACpCC,EAAeD,iBAAyB,MAExCE,EAAWF,iBAA0B,MACrCG,EAAgBH,iBAAyB,MALpB,EAOiBI,oBAAkB,GAPnC,mBAOpBC,EAPoB,KAOJC,EAPI,OAQmBF,oBAAkB,GARrC,mBAQpBG,EARoB,KAQHC,EARG,KAU3BC,qBAAU,WACFV,EAAQW,SAAWT,EAAaS,SAChCC,MAEL,CAACN,IAEJI,qBAAU,WACFP,EAASQ,SAAWP,EAAcO,SAClCE,MAEL,CAACL,IAEJ,IAAMI,EAAW,uCAAG,4BAAAE,EAAA,sEACUC,UAAUC,aAAaC,aAAa,CAC1DC,OAAO,EACPC,OAAO,IAHK,OACVC,EADU,OAKhBlB,EAAaS,QAAQU,UAAYD,EACjClB,EAAaS,QAAQW,iBAAmB,WACpCpB,EAAaS,QAAQY,QAEzBC,IATgB,2CAAH,qDAYXA,EAAsB,SAAtBA,IACUxB,EAAQW,QAAQc,WAAW,MACnCC,UAAUxB,EAAaS,QAAS,EAAG,EAvC3B,IACC,KAuCbgB,sBAAsBH,IAGpBX,EAAY,uCAAG,sBAAAC,EAAA,sDACjBc,kBAAgBC,WAAW,CAAEC,MAAO,CAAC,YAAaC,KAAlD,uCAAuD,WAAOC,GAAP,eAAAlB,EAAA,+EAErBC,UAAUC,aAAaC,aAAa,CAC1DE,OAAO,EACPD,MAAO,CACHe,UAAW,CACPC,kBAAmB,UACnBC,oBAAqBH,EAAQ,GAAGI,GAChCC,SApDR,IAqDQC,SArDR,IAsDQC,UArDP,IAsDOC,UAtDP,QA2C0C,OAEzCpB,EAFyC,OAe/ChB,EAAcO,QAAQU,UAAYD,EAClChB,EAAcO,QAAQW,iBAAmB,WACrClB,EAAcO,QAAQY,QAE1BkB,IAnB+C,gDAqB/CC,QAAQC,MAAR,MArB+C,yDAAvD,uDADiB,2CAAH,qDA2BZF,EAAuB,SAAvBA,IACUtC,EAASQ,QAAQc,WAAW,MACpCC,UAAUtB,EAAcO,QAAS,EAAG,EAxE5B,IACC,KAwEbgB,sBAAsBc,IAG1B,OACI,6BACI,yBAAKL,GAAG,eAAeQ,UAAWC,IAAOC,cACrC,4BACIC,MAhFA,IAiFAC,OAhFC,IAiFDZ,GAAG,UACHa,IAAKjD,EACLkD,MAAO,CAAEC,WAAY,gBAEzB,4BACIJ,MAvFA,IAwFAC,OAvFC,IAwFDZ,GAAG,WACHa,IAAK9C,EACL+C,MAAO,CAAEC,WAAY,kBAGzB,2BACIf,GAAG,eACHa,IAAK/C,EACL0C,UAAWC,IAAO3B,MAClBkC,UAAU,EACVL,MAnGA,IAoGAC,OAnGC,MAqGL,2BACIZ,GAAG,gBACHa,IAAK7C,EACLwC,UAAWC,IAAO3B,MAClBkC,UAAU,EACVL,MA3GA,IA4GAC,OA3GC,OA8GT,yBAAKJ,UAAWC,IAAOQ,YACnB,6BACI,kBAAC,IAAD,CACIC,KAAK,UACLC,QAAS,WACLhD,GAAkB,KAH1B,mCASJ,6BACI,kBAAC,IAAD,CACI+C,KAAK,UACLC,QAAS,WACL9C,GAAmB,KAH3B,gCCtHL+C,MARf,WACI,OACI,yBAAKZ,UAAU,OACX,kBAAC,EAAD,QCKQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBlD,WACrBA,UAAUmD,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLD,QAAQC,MAAMA,EAAM4B,c","file":"static/js/main.d6317fd4.chunk.js","sourcesContent":["module.exports = require(\"electron\");","import React, { useRef, useEffect, useState } from 'react'\nimport { desktopCapturer } from 'electron'\nimport { Button } from 'antd'\nimport styles from './index.scss'\n\n// console.log(desktopCapturer)\n\nconst VIDEO_WIDTH = 500\nconst VIDEO_HEIGHT = 400\n\nconst WebRTC: React.FC = () => {\n    const monitor = useRef<HTMLCanvasElement>(null)\n    const monitorVideo = useRef<HTMLVideoElement>(null)\n\n    const recorder = useRef<HTMLCanvasElement>(null)\n    const recorderVideo = useRef<HTMLVideoElement>(null)\n\n    const [monitorVisible, setMonitorVisible] = useState<boolean>(false)\n    const [recorderVisible, setRecorderVisible] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (monitor.current && monitorVideo.current) {\n            initMonitor()\n        }\n    }, [monitorVisible])\n\n    useEffect(() => {\n        if (recorder.current && recorderVideo.current) {\n            initRecorder()\n        }\n    }, [recorderVisible])\n\n    const initMonitor = async () => {\n        const mediaStream = await navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: false\n        })\n        monitorVideo.current.srcObject = mediaStream\n        monitorVideo.current.onloadedmetadata = () => {\n            monitorVideo.current.play()\n        }\n        monitorDrawToCanvas()\n    }\n\n    const monitorDrawToCanvas = () => {\n        const ctx = monitor.current.getContext('2d')\n        ctx.drawImage(monitorVideo.current, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT)\n        requestAnimationFrame(monitorDrawToCanvas)\n    }\n\n    const initRecorder = async () => {\n        desktopCapturer.getSources({ types: ['screen'] }).then(async (sources: any[]) => {\n            try {\n                const mediaStream = await navigator.mediaDevices.getUserMedia({\n                    audio: false,\n                    video: {\n                        mandatory: {\n                            chromeMediaSource: 'desktop',\n                            chromeMediaSourceId: sources[0].id,\n                            minWidth: VIDEO_WIDTH,\n                            maxWidth: VIDEO_WIDTH,\n                            minHeight: VIDEO_HEIGHT,\n                            maxHeight: VIDEO_HEIGHT\n                        }\n                    } as MediaTrackConstraints\n                })\n                recorderVideo.current.srcObject = mediaStream\n                recorderVideo.current.onloadedmetadata = () => {\n                    recorderVideo.current.play()\n                }\n                RecorderDrawToCanvas()\n            } catch (e) {\n                console.error(e)\n            }\n        })\n    }\n\n    const RecorderDrawToCanvas = () => {\n        const ctx = recorder.current.getContext('2d')\n        ctx.drawImage(recorderVideo.current, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT)\n        requestAnimationFrame(RecorderDrawToCanvas)\n    }\n\n    return (\n        <div>\n            <div id=\"mediaWrapper\" className={styles.mediaWrapper}>\n                <canvas\n                    width={VIDEO_WIDTH}\n                    height={VIDEO_HEIGHT}\n                    id=\"monitor\"\n                    ref={monitor}\n                    style={{ background: 'lightgreen' }}\n                />\n                <canvas\n                    width={VIDEO_WIDTH}\n                    height={VIDEO_HEIGHT}\n                    id=\"recorder\"\n                    ref={recorder}\n                    style={{ background: 'lightskyblue' }}\n                />\n\n                <video\n                    id=\"monitorVideo\"\n                    ref={monitorVideo}\n                    className={styles.video}\n                    autoPlay={false}\n                    width={VIDEO_WIDTH}\n                    height={VIDEO_HEIGHT}\n                />\n                <video\n                    id=\"recorderVideo\"\n                    ref={recorderVideo}\n                    className={styles.video}\n                    autoPlay={false}\n                    width={VIDEO_WIDTH}\n                    height={VIDEO_HEIGHT}\n                />\n            </div>\n            <div className={styles.btnWrapper}>\n                <div>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => {\n                            setMonitorVisible(true)\n                        }}\n                    >\n                        开启摄像头\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => {\n                            setRecorderVisible(true)\n                        }}\n                    >\n                        录制屏幕\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WebRTC\n","import React from 'react'\nimport './App.css'\nimport WebRTC from './WebRTC'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <WebRTC />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}